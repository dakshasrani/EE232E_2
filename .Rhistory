for( i in 1:vcount (g)){
count=length(vec[i,vec[i,]>.0339])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
cn=0
for( i in 1:vcount (g)){
count=length(vec[i,vec[i,]>.034])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
vec[298,]
vec[2900,]
vec[2335,]
?netrw
fg = fastgreedy.community(ng2)
cmsize <- as.vector(sizes(fg))
TimeStep=1000
WalkNum=10
vec=matrix(0,vcount(g),8)
for( i in  (1:(vcount(g))))
{
probvec=rep(0,vcount(g))
probvec(i)=1
sim <- netrw (g,WalkNum,start.node = i ,weights=(E(g)$weight),teleport.prob=probvec,damping=.85,T=TimeStep,output.walk.path=TRUE)$ave.visit.prob
sortsim = sort(sim, method = "sh", index.return = TRUE,decreasing=TRUE)
tsim = sortsim$x[1:30]
indx = sortsim$ix[1:30]
mebr= fg$membership[indx]
for( j in 1:30)
{
vec[i,mebr[j]] = vec[i,mebr[j]]+tsim[j]
}
print(i)
}
fg = fastgreedy.community(ng2)
cmsize <- as.vector(sizes(fg))
TimeStep=1000
WalkNum=10
vec=matrix(0,vcount(g),8)
for( i in  (1:(vcount(g))))
{
probvec=rep(0,vcount(g))
probvec[i]=1
sim <- netrw (g,WalkNum,start.node = i ,weights=(E(g)$weight),teleport.prob=probvec,damping=.85,T=TimeStep,output.walk.path=TRUE)$ave.visit.prob
sortsim = sort(sim, method = "sh", index.return = TRUE,decreasing=TRUE)
tsim = sortsim$x[1:30]
indx = sortsim$ix[1:30]
mebr= fg$membership[indx]
for( j in 1:30)
{
vec[i,mebr[j]] = vec[i,mebr[j]]+tsim[j]
}
print(i)
}
fg = fastgreedy.community(ng2)
cmsize <- as.vector(sizes(fg))
TimeStep=1000
WalkNum=10
vec=matrix(0,vcount(g),8)
probvec=rep(0,vcount(g))
for( i in  (1:(vcount(g))))
{
if( i != 1)
{
probvec[i-1]=0
}
probvec[i]=1
sim <- netrw (g,WalkNum,start.node = i ,weights=(E(g)$weight),teleport.prob=probvec,damping=.85,T=TimeStep,output.walk.path=TRUE)$ave.visit.prob
sortsim = sort(sim, method = "sh", index.return = TRUE,decreasing=TRUE)
tsim = sortsim$x[1:30]
indx = sortsim$ix[1:30]
mebr= fg$membership[indx]
for( j in 1:30)
{
vec[i,mebr[j]] = vec[i,mebr[j]]+tsim[j]
}
print(i)
}
source('~/GitHub/Dropbox-Network-Study/HW3a.R')
cn
cn=0
for( i in 1:vcount (g)){
count=length(vec[i,vec[i,]>.05])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
cn
cn=0
for( i in 1:vcount (g)){
count=length(vec[i,vec[i,]>.09])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
cn
cn=0
for( i in 1:vcount (g)){
count=length(vec[i,vec[i,]>.11])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
cn
cn=0
for( i in 1:vcount (g)){
count=length(vec[i,vec[i,]>.15])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
cn
cn=0
for( i in 1:vcount (g)){
count=length(vec[i,vec[i,]>.18])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
cn
vec[10479,]
vec[1042,]
vec[1062,]
cn=0
for( i in 1:vcount (g)){
count=length(vec[i,vec[i,]>.2])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
cn
cn=0
for( i in 1:vcount (g)){
count=length(vec[i,vec[i,]>.22])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
cn
cn=0
for( i in 1:vcount (g)){
count=length(vec[i,vec[i,]>.24])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
cn
cn=0
for( i in 1:vcount (g)){
count=length(vec[i,vec[i,]>.27])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
cn=0
for( i in 1:vcount (g)){
count=length(vec[i,vec[i,]>.30])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
cn=0
for( i in 1:vcount (g)){
count=length(vec[i,vec[i,]>.35])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
cn
vec[10470,]
vec[10471,]
vec[10478,]
vec[10479,]
vec[10441,]
vec[10442,]
cn=0
for( i in 1:vcount (g)){
count=length(vec[i,vec[i,]>.45])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
cn=0
for( i in 1:vcount (g)){
count=length(vec[i,vec[i,]>.46])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
cn
cn=0
for( i in 1:vcount (g)){
count=length(vec[i,vec[i,]>.455])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
cn
cn=0
for( i in 1:vcount (g)){
count=length(vec[i,vec[i,]>.459])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
{
vec[i,mebr[j]] = vec[i,mebr[j]]+tsim[j]
cn=0
for( i in 1:vcount (g)){
count=length(vec[i,vec[i,]>.46])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
dsfds
fds
fds
fs
df
sdfdsf;
dsf
df;dsf
df;dsf}
}
cn=0
for( i in 1:vcount (g)){
count=length(vec[i,vec[i,]>.46])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
cn
cn=0
for( i in 1:vcount (g)){
count=length(vec[i,vec[i,]>.45])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
fg = fastgreedy.community(ng2)
cmsize <- as.vector(sizes(fg))
TimeStep=1000
WalkNum=10
vec=matrix(0,vcount(g),8)
probvec=rep(0,vcount(g))
for( i in  (1:(vcount(g))))
{
if( i != 1)
{
probvec[i-1]=0
}
probvec[i]=1
sim <- netrw (g,WalkNum,start.node = i ,weights=(E(g)$weight),teleport.prob=probvec,damping=.85,T=TimeStep,output.walk.path=TRUE)$ave.visit.prob
sortsim = sort(sim, method = "sh", index.return = TRUE,decreasing=TRUE)
tsim = sortsim$x[1:30]
indx = sortsim$ix[1:30]
mebr= fg$membership[indx]
for( j in 1:30)
{
vec[i,mebr[j]] = vec[i,mebr[j]]+tsim[j]
}
print(i)
}
cn=0
for( i in 1:vcount (g)){
count=length(vec[i,vec[i,]>.45])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
source('~/GitHub/Dropbox-Network-Study/HW3a.R')
source('~/GitHub/Dropbox-Network-Study/HW3a.R')
cn=0
for( i in 1:vcount (gcc)){
count=length(vec[i,vec[i,]>.45])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
cn
cn=0
for( i in 1:vcount (gcc)){
count=length(vec[i,vec[i,]>.34])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
cn
cn=0
for( i in 1:vcount (gcc)){
count=length(vec[i,vec[i,]>.2])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
cn
cn=0
for( i in 1:vcount (gcc)){
count=length(vec[i,vec[i,]>.1])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
cn
cn=0
for( i in 1:vcount (gcc)){
count=length(vec[i,vec[i,]>.15])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
cn=0
for( i in 1:vcount (gcc)){
count=length(vec[i,vec[i,]>.13])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
cn
cn=0
for( i in 1:vcount (gcc)){
count=length(vec[i,vec[i,]>.138])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
cn
cn=0
for( i in 1:vcount (gcc)){
count=length(vec[i,vec[i,]>.14])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
#graph plotter
cn1=rep(0, vcount(gcc))
for( i in 1:vcount (gcc)){
cn1[i] = length(vec[i,vec[i,]>.45])
}
plot(cn1)
plot(cn1,main=paste(".14"),pch=".")
#graph plotter
cn1=rep(0, vcount(gcc))
for( i in 1:vcount (gcc)){
cn1[i] = length(vec[i,vec[i,]>.13])
}
plot(cn1,main=".13",type="o")
#graph plotter
cn1=rep(0, vcount(gcc))
for( i in 1:vcount (gcc)){
cn1[i] = length(vec[i,vec[i,]>.13])
}
plot(cn1,main=".14",type="o")
#graph plotter
cn1=rep(0, vcount(gcc))
for( i in 1:vcount (gcc)){
cn1[i] = length(vec[i,vec[i,]>.14])
}
cn1[1]=5
plot(cn1,main=".14",type="o")
cn=0
for( i in 1:vcount (gcc)){
count=length(vec[i,vec[i,]>.14])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
vec[6205]
vec[6205,]
cn=0
for( i in 1:vcount (gcc)){
count=length(vec[i,vec[i,]>.143])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
cn
cn=0
for( i in 1:vcount (gcc)){
count=length(vec[i,vec[i,]>.145])
if(count>1)
{
print(i)
print(count)
cn=cn+1
}
}
cn
vec[6205,]
vec[9784,]
vec[10151,]
cmsize$membership[6205]
cmsize$membership
fg$membership
fg$membership[6205]
fg$membership[9784]
fg$membership[10151]
setwd("~/GitHub/Imdb-Database-study")
?read.graph
libr''
library(igraph)
library(netrw)
?read.graph
library(igraph)
library(netrw)
g<-read.graph("temp1.txt",format="ncol",directed=T)
lpg<-page.rank(g)
sort(unlist(lpg$vector),decreasing=TRUE)[1:11]
head(lpg)
summary(lpg)
lpg$value
lpg$options
sort(lpg$vector)
head(sort(lpg$vector))
sort(unlist(lpg$vector),decreasing=TRUE)[1:11]
sort(unlist(lpg$vector),decreasing=TRUE)["Flowers,Bess"]
